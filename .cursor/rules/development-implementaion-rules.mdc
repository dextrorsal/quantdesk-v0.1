---
description: Rule 4. Development and Implementation Rules. Rule 4.1 Agent Script Structure Follow the guide's agent.ts template Initialize LLM (e.g., GPT-4-turbo), Solana kit with private key/RPC, tools via createSolanaTools, and React agent with memory. Implement interactive chat with readline for testing. Rule 4.2 Task-Specific Actions Enable actions like showing wallet balance, requesting devnet SOL, creating NFT collections (e.g., with Pinata URIs), and minting NFTs. For perpetuals, add tools for funding rate analysis or swaps. Contribute custom actions per the Solana Agent Kit guide. Rule 4.3 Twitter Bot with Eliza For social integration, clone Eliza repo, configure .env with Twitter credentials and Solana keys. Define characters in JSON (e.g., "Sol" with clients ["twitter"], modelProvider "openai"). Enable NFT minting on user requests. Rule 4.4 On-Chain Integration For advanced agents, use oracles like in super-smart-contracts for LLM responses in programs (e.g., JSON with "reply" and "amount" for token dispensing). Rust-based agents should use Rig for LLM connections and Listen.rs for transaction monitoring/Jito bundles. Rule 4.5 Advanced Trading Bots For perpetuals/whale tracking, combine GOAT's plugins (e.g., Rugcheck for token validity, DeBridge for bridging) with fine-tuned LLM for sentiment prediction. Use Rig/Listen.rs for high-performance Rust bots.
alwaysApply: false
---
