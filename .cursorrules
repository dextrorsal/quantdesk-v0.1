# QuantDesk Perpetual DEX - AI Assistant Rules

## üöÄ Project Identity
**QuantDesk** is a sophisticated Solana-based perpetual DEX platform featuring multi-service architecture, AI-powered trading assistance, and real-time data ingestion.

## üèóÔ∏è Multi-Service Architecture

| Service | Port | Technology | Purpose |
|---------|------|------------|---------|
| **Backend** | 3002 | Node.js/Express/TypeScript | API Gateway, Database, Oracle |
| **Frontend** | 3001 | React/Vite/TypeScript | Trading Interface, Portfolio |
| **MIKEY-AI** | 3000 | LangChain/TypeScript | AI Trading Agent |
| **Data Ingestion** | 3003 | Node.js/Pipeline | Real-time Data Collection |

## üõ†Ô∏è Technology Stack

### Core Technologies
- **Backend**: Node.js 20+, Express.js, TypeScript, pnpm
- **Frontend**: React 18, Vite, Tailwind CSS, TypeScript
- **Smart Contracts**: Rust, Anchor Framework, Solana
- **Database**: Supabase (PostgreSQL)
- **Oracle**: Pyth Network
- **AI**: LangChain, Multi-LLM routing

### Deployment
- **Frontend/Backend**: Vercel
- **Optional**: Railway for backend
- **Smart Contracts**: Solana devnet/mainnet

## üéØ Architecture Patterns

### Critical Patterns (MUST FOLLOW)
1. **Database Access**: Always use `databaseService` from `backend/src/services/supabaseDatabase.ts`, never direct Supabase calls
2. **Error Handling**: Use custom error classes from `backend/src/middleware/errorHandling.ts`
3. **Rate Limiting**: Tiered rate limits via `backend/src/middleware/rateLimiting.ts`
4. **Oracle Integration**: Backend-centric via `pythOracleService.getAllPrices()` - returns `Record<string, number>`

### Key Design Decisions
- **Backend-Centric Oracle**: Pyth prices fetched by backend, normalized and cached
- **Consolidated Database Service**: Single abstraction layer prevents direct Supabase usage
- **Multi-Service Coordination**: Services communicate via backend API gateway

## ü§ñ BMAD Method Integration

### When to Use BMAD Workflow
**For complex features spanning multiple departments or requiring structured development:**

- **Multi-department features** (Frontend + Backend + Smart Contracts)
- **New major functionality** requiring architecture decisions
- **High-risk trading features** needing comprehensive testing
- **Complex integrations** between services

### BMAD Resource Navigation
- **Quick Task Assessment**: `.cursor/rules/quantdesk-bmad-workflow.mdc` - Use for immediate task complexity evaluation
- **Complete Methodology**: `.bmad-core/user-guide.md` - Full BMAD workflow and agent guidance
- **IDE Development Process**: `.bmad-core/enhanced-ide-development-workflow.md` - Step-by-step development workflow
- **BMAD Agents**: `.bmad-core/agents/` - Individual agent files (architect.md, dev.md, qa.md, etc.)
- **Core Configuration**: `.bmad-core/core-config.yaml` - BMAD system configuration

### Decision Tree
```
Is this a simple bug fix or small feature? 
‚îú‚îÄ Yes ‚Üí Direct implementation (skip BMAD)
‚îî‚îÄ No ‚Üí Does it span multiple departments?
    ‚îú‚îÄ Yes ‚Üí Use BMAD workflow (@architect ‚Üí @sm ‚Üí @dev ‚Üí @qa)
    ‚îî‚îÄ No ‚Üí Quick assessment with quantdesk-bmad-workflow.mdc
```

## üîß Development Quick Start

### Package Manager
**ALWAYS use pnpm, NEVER npm**

### Essential Commands
```bash
# Backend development
cd backend && pnpm run start:dev

# Frontend development  
cd frontend && pnpm run dev

# Smart contracts
cd contracts && anchor build && anchor test

# All services
npm run dev  # From project root
```

### Key File Paths
- **Backend entry**: `backend/src/server.ts`
- **Database service**: `backend/src/services/supabaseDatabase.ts`
- **Smart contract**: `contracts/smart-contracts/programs/quantdesk-perp-dex/src/lib.rs`
- **Frontend entry**: `frontend/src/main.tsx`

## üîç AI Development Endpoints (Port 3002)

Use these endpoints to understand the system architecture:
- `GET /api/dev/codebase-structure` - Full architecture overview
- `GET /api/dev/market-summary` - Market data structure
- `GET /api/dev/user-portfolio/:wallet` - User data relationships
- `GET /api/docs/swagger` - OpenAPI specification

## ‚ö†Ô∏è Common Issues & Solutions

### Expected Devnet Limitations
- Missing `execute_sql` function in Supabase is EXPECTED for devnet (non-critical)
- Missing `auth_nonces` table is EXPECTED for devnet (non-critical)

### Data Format Notes
- Oracle prices are in scientific notation (already normalized by backend)
- Always use pnpm, not npm

## üéØ AI Assistant Guidance

### When to Use Direct Implementation
- Simple bug fixes
- Small UI adjustments
- Single-file changes
- Documentation updates

### When to Consult BMAD Resources
- Multi-department features
- New trading functionality
- Architecture changes
- Complex integrations
- High-risk modifications

### Context Loading Strategy
1. **Always load**: Current file context + related files
2. **For architecture questions**: Use `/api/dev/codebase-structure` endpoint
3. **For BMAD workflows**: Reference `.cursor/rules/quantdesk-bmad-workflow.mdc`
4. **For complex features**: Follow BMAD methodology in `.bmad-core/`

## üìã Quality Standards

### Code Quality
- Follow existing patterns in each service
- Use TypeScript strict mode
- Implement proper error handling
- Add comprehensive logging

### Testing Requirements
- Unit tests for business logic
- Integration tests for API endpoints
- Smart contract tests before deployment
- Use QA agent (`@qa`) for complex features

---

**Remember**: This is a trading platform handling real financial data. Always prioritize security, data integrity, and comprehensive testing for trading-related features.