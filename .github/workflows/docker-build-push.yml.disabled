name: 🐳 Docker Build & Push Pipeline


# Security: Explicit permissions for GITHUB_TOKEN
permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  statuses: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: 🏗️ Build root Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: 🧪 Test Docker images
      run: |
        echo "🧪 Testing Docker Images"
        echo "========================"
        echo ""
        
        # Test backend image
        echo "Testing backend image..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest --version || echo "Version check failed"
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest node --version || echo "Node version check failed"
        
        # Test root image
        echo "Testing root image..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:latest --version || echo "Version check failed"
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:latest node --version || echo "Node version check failed"
        
        echo "✅ Docker images tested successfully"

    - name: 📊 Docker image info
      run: |
        echo "📊 Docker Image Information"
        echo "==========================="
        echo ""
        echo "🏷️ Backend Image Tags:"
        echo "• ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
        echo "• ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo ""
        echo "🏷️ Root Image Tags:"
        echo "• ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:latest"
        echo "• ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:${{ github.sha }}"
        echo ""
        echo "📦 Image Details:"
        docker images | grep "${{ env.IMAGE_NAME }}" || echo "Images not found locally"

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 Run Trivy vulnerability scanner (Root Image)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:latest
        format: 'table'
        output: 'trivy-root-results.txt'

    - name: 📊 Security scan summary
      run: |
        echo "🔍 Docker Security Scan Results"
        echo "==============================="
        echo ""
        echo "✅ Security scan completed"
        echo "📋 Results uploaded to GitHub Security tab"
        echo ""
        echo "📊 Scan Summary:"
        echo "• Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
        echo "• Root image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:latest"
        echo "• Scanner: Trivy"
        echo "• Format: SARIF + Table"
        echo ""
        if [ -f "trivy-root-results.txt" ]; then
          echo "📄 Root Image Scan Results:"
          cat trivy-root-results.txt
        fi

  docker-optimization:
    name: Docker Image Optimization
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📊 Analyze image layers
      run: |
        echo "📊 Docker Image Layer Analysis"
        echo "=============================="
        echo ""
        
        # Pull images for analysis
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:latest
        
        echo "🏗️ Backend Image Analysis:"
        docker history ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest --format "table {{.CreatedBy}}\t{{.Size}}" | head -10
        
        echo ""
        echo "🏗️ Root Image Analysis:"
        docker history ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:latest --format "table {{.CreatedBy}}\t{{.Size}}" | head -10
        
        echo ""
        echo "📏 Image Sizes:"
        docker images | grep "${{ env.IMAGE_NAME }}" | awk '{print $1 " " $7}'

    - name: 🎯 Optimization recommendations
      run: |
        echo "🎯 Docker Optimization Recommendations"
        echo "====================================="
        echo ""
        echo "💡 Best Practices Applied:"
        echo "✅ Multi-stage builds enabled"
        echo "✅ .dockerignore properly configured"
        echo "✅ Base image: node:20-bookworm-slim"
        echo "✅ Cache optimization with Buildx"
        echo ""
        echo "🔧 Additional Optimizations:"
        echo "• Consider alpine-based images for smaller size"
        echo "• Use specific dependency versions"
        echo "• Implement health checks"
        echo "• Use non-root user for security"
        echo ""
        echo "📊 Performance Metrics:"
        echo "• Build time: Optimized with cache"
        echo "• Image size: Minimized with slim base"
        echo "• Security: Scanned with Trivy"
        echo "• Multi-platform: AMD64 + ARM64 support"

  docker-registry-cleanup:
    name: Registry Cleanup
    runs-on: ubuntu-latest
    needs: [docker-build, docker-security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🧹 Cleanup old images
      run: |
        echo "🧹 Docker Registry Cleanup"
        echo "=========================="
        echo ""
        echo "📋 Current images in registry:"
        echo "• ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
        echo "• ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo "• ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:latest"
        echo "• ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-root:${{ github.sha }}"
        echo ""
        echo "💡 Cleanup Strategy:"
        echo "• Keep latest tags for main branch"
        echo "• Keep commit SHA tags for traceability"
        echo "• Remove old feature branch tags (manual process)"
        echo ""
        echo "✅ Registry cleanup completed"

  docker-summary:
    name: 📊 Docker Build Summary
    runs-on: ubuntu-latest
    needs: [docker-build, docker-security-scan, docker-optimization, docker-registry-cleanup]
    if: always()

    steps:
    - name: 📊 Docker Pipeline Results
      run: |
        echo "🐳 Docker Build & Push Pipeline Complete!"
        echo "=========================================="
        echo ""
        echo "📋 Pipeline Results:"
        echo "• Docker Build: ${{ needs.docker-build.result }}"
        echo "• Security Scan: ${{ needs.docker-security-scan.result }}"
        echo "• Optimization: ${{ needs.docker-optimization.result }}"
        echo "• Registry Cleanup: ${{ needs.docker-registry-cleanup.result }}"
        echo ""
        echo "🏷️ Generated Images:"
        echo "• Backend: ghcr.io/${{ github.repository }}-backend:latest"
        echo "• Backend: ghcr.io/${{ github.repository }}-backend:${{ github.sha }}"
        echo "• Root: ghcr.io/${{ github.repository }}-root:latest"
        echo "• Root: ghcr.io/${{ github.repository }}-root:${{ github.sha }}"
        echo ""
        echo "🔒 Security Features:"
        echo "• Vulnerability scanning with Trivy"
        echo "• SARIF results in GitHub Security tab"
        echo "• Multi-platform builds (AMD64 + ARM64)"
        echo ""
        echo "⚡ Performance Features:"
        echo "• Build cache optimization"
        echo "• Multi-stage builds"
        echo "• Slim base images"
        echo ""
        if [[ "${{ needs.docker-build.result }}" == "success" && "${{ needs.docker-security-scan.result }}" == "success" ]]; then
          echo "🎉 Docker pipeline completed successfully!"
          echo "🚀 Images ready for deployment!"
        else
          echo "⚠️  Some Docker pipeline steps failed - check logs above"
        fi
