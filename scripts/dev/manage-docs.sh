#!/bin/bash

# 📚 Master Documentation Management Script for QuantDesk
# Provides a menu-driven interface for all documentation operations

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Function to display menu
show_menu() {
    echo -e "${BLUE}📚 QuantDesk Documentation Management${NC}"
    echo "======================================"
    echo ""
    echo -e "${GREEN}1.${NC} 📊 Audit Documentation (Quick overview)"
    echo -e "${GREEN}2.${NC} 🗂️ Organize Documentation (Structure & Archive)"
    echo -e "${GREEN}3.${NC} 🔍 Validate Documentation (Health & Consolidation)"
    echo -e "${GREEN}4.${NC} 📋 View Documentation Structure"
    echo -e "${GREEN}5.${NC} 🔧 Fix Common Issues"
    echo -e "${GREEN}6.${NC} 📈 Generate Documentation Report"
    echo -e "${GREEN}7.${NC} 🚀 Run All Operations"
    echo -e "${GREEN}8.${NC} ❓ Help & Documentation"
    echo -e "${GREEN}9.${NC} 🚪 Exit"
    echo ""
}

# Function to run audit
run_audit() {
    echo -e "${BLUE}📊 Running Documentation Audit...${NC}"
    echo "=================================="
    ./audit-docs.sh
    echo ""
    read -p "Press Enter to continue..."
}

# Function to organize docs
organize_docs() {
    echo -e "${BLUE}🗂️ Organizing Documentation...${NC}"
    echo "==============================="
    echo -e "${YELLOW}⚠️ This will reorganize your documentation structure.${NC}"
    echo -e "${YELLOW}A backup will be created before making changes.${NC}"
    echo ""
    read -p "Continue? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        ./organize-docs.sh
    else
        echo -e "${YELLOW}Operation cancelled.${NC}"
    fi
    echo ""
    read -p "Press Enter to continue..."
}

# Function to validate docs
validate_docs() {
    echo -e "${BLUE}🔍 Validating Documentation...${NC}"
    echo "==============================="
    ./validate-docs.sh
    echo ""
    read -p "Press Enter to continue..."
}

# Function to view structure
view_structure() {
    echo -e "${BLUE}📋 Documentation Structure${NC}"
    echo "=========================="
    echo ""
    
    if [ -d "docs" ]; then
        echo -e "${GREEN}📁 Current Documentation:${NC}"
        find docs -name "*.md" | head -20 | while read file; do
            echo -e "   ${CYAN}• $file${NC}"
        done
        
        local total_docs=$(find docs -name "*.md" | wc -l)
        if [ $total_docs -gt 20 ]; then
            echo -e "   ${YELLOW}... and $((total_docs - 20)) more files${NC}"
        fi
    else
        echo -e "${RED}❌ No docs directory found${NC}"
    fi
    
    echo ""
    
    if [ -d "archive/docs" ]; then
        echo -e "${PURPLE}📦 Archived Documentation:${NC}"
        find archive/docs -name "*.md" | head -10 | while read file; do
            echo -e "   ${CYAN}• $file${NC}"
        done
        
        local archive_docs=$(find archive/docs -name "*.md" | wc -l)
        if [ $archive_docs -gt 10 ]; then
            echo -e "   ${YELLOW}... and $((archive_docs - 10)) more files${NC}"
        fi
    else
        echo -e "${YELLOW}📦 No archived documentation found${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

# Function to fix common issues
fix_issues() {
    echo -e "${BLUE}🔧 Fixing Common Issues...${NC}"
    echo "=========================="
    
    local fixed=0
    
    # Fix empty files
    echo -e "${YELLOW}🔍 Checking for empty files...${NC}"
    find docs -name "*.md" -size 0 | while read file; do
        echo -e "${RED}❌ Empty file found: $file${NC}"
        echo -e "${GREEN}💡 Consider removing or fixing: $file${NC}"
    done
    
    # Fix files without headers
    echo -e "${YELLOW}🔍 Checking for files without headers...${NC}"
    find docs -name "*.md" -exec sh -c 'if [ ! -s "$1" ] || ! grep -q "^#" "$1"; then echo "❌ No headers in: $1"; fi' _ {} \;
    
    # Fix very large files
    echo -e "${YELLOW}🔍 Checking for very large files...${NC}"
    find docs -name "*.md" -exec sh -c 'if [ $(wc -l < "$1") -gt 1000 ]; then echo "⚠️ Large file: $1 ($(wc -l < "$1") lines)"; fi' _ {} \;
    
    echo -e "${GREEN}✅ Common issues check completed${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

# Function to generate report
generate_report() {
    echo -e "${BLUE}📈 Generating Documentation Report...${NC}"
    echo "===================================="
    
    local report_file="reports/docs/documentation-summary-$(date +%Y%m%d-%H%M%S).md"
    mkdir -p reports/docs
    
    cat > "$report_file" << EOF
# 📚 QuantDesk Documentation Summary

**Generated**: $(date)
**Generated by**: Documentation Management Script

## 📊 Quick Statistics

EOF

    # Count documents
    local total_docs=$(find docs -name "*.md" 2>/dev/null | wc -l)
    local archive_docs=$(find archive/docs -name "*.md" 2>/dev/null | wc -l)
    
    cat >> "$report_file" << EOF
- **Total Current Documents**: $total_docs
- **Archived Documents**: $archive_docs
- **Total Documentation**: $((total_docs + archive_docs))

## 📁 Current Documentation Structure

EOF

    # List current docs
    find docs -name "*.md" | head -20 | while read file; do
        echo "- $file" >> "$report_file"
    done
    
    if [ $total_docs -gt 20 ]; then
        echo "- ... and $((total_docs - 20)) more files" >> "$report_file"
    fi
    
    cat >> "$report_file" << EOF

## 📦 Archived Documentation

EOF

    # List archived docs
    if [ -d "archive/docs" ]; then
        find archive/docs -name "*.md" | head -10 | while read file; do
            echo "- $file" >> "$report_file"
        done
        
        if [ $archive_docs -gt 10 ]; then
            echo "- ... and $((archive_docs - 10)) more files" >> "$report_file"
        fi
    else
        echo "- No archived documentation found" >> "$report_file"
    fi
    
    cat >> "$report_file" << EOF

## 💡 Recommendations

1. **Run Audit**: Use \`./audit-docs.sh\` for detailed analysis
2. **Organize Structure**: Use \`./organize-docs.sh\` to reorganize
3. **Validate Content**: Use \`./validate-docs.sh\` to check health
4. **Regular Maintenance**: Run these scripts monthly

## 🚀 Next Steps

1. Review this summary
2. Run appropriate organization scripts
3. Update documentation index
4. Set up regular maintenance schedule

---

**📚 This report provides a quick overview of your documentation status.**
EOF

    echo -e "${GREEN}✅ Report generated: $report_file${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

# Function to run all operations
run_all() {
    echo -e "${BLUE}🚀 Running All Documentation Operations...${NC}"
    echo "============================================="
    echo ""
    
    echo -e "${YELLOW}Step 1: Auditing documentation...${NC}"
    ./audit-docs.sh
    echo ""
    
    echo -e "${YELLOW}Step 2: Organizing documentation...${NC}"
    echo -e "${YELLOW}⚠️ This will reorganize your documentation structure.${NC}"
    read -p "Continue with organization? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        ./organize-docs.sh
        echo ""
        
        echo -e "${YELLOW}Step 3: Validating documentation...${NC}"
        ./validate-docs.sh
        echo ""
        
        echo -e "${GREEN}🎉 All operations completed!${NC}"
    else
        echo -e "${YELLOW}Organization skipped. Running validation only...${NC}"
        ./validate-docs.sh
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

# Function to show help
show_help() {
    echo -e "${BLUE}❓ Documentation Management Help${NC}"
    echo "================================="
    echo ""
    echo -e "${GREEN}📊 Audit Documentation${NC}"
    echo "  • Provides quick overview of documentation status"
    echo "  • Identifies outdated, empty, and large files"
    echo "  • Shows recommendations for improvement"
    echo ""
    echo -e "${GREEN}🗂️ Organize Documentation${NC}"
    echo "  • Reorganizes documentation into logical categories"
    echo "  • Moves outdated files to archive"
    echo "  • Creates backup before making changes"
    echo "  • Updates documentation index"
    echo ""
    echo -e "${GREEN}🔍 Validate Documentation${NC}"
    echo "  • Checks for broken links and invalid files"
    echo "  • Identifies duplicate content"
    echo "  • Suggests consolidation opportunities"
    echo "  • Generates detailed health report"
    echo ""
    echo -e "${GREEN}📋 View Structure${NC}"
    echo "  • Shows current documentation organization"
    echo "  • Lists archived documentation"
    echo "  • Provides quick overview"
    echo ""
    echo -e "${GREEN}🔧 Fix Common Issues${NC}"
    echo "  • Identifies common documentation problems"
    echo "  • Suggests fixes for empty files"
    echo "  • Highlights files without headers"
    echo "  • Identifies overly large files"
    echo ""
    echo -e "${GREEN}📈 Generate Report${NC}"
    echo "  • Creates comprehensive documentation summary"
    echo "  • Saves report to reports/docs/"
    echo "  • Includes statistics and recommendations"
    echo ""
    echo -e "${GREEN}🚀 Run All Operations${NC}"
    echo "  • Executes audit, organize, and validate in sequence"
    echo "  • Provides comprehensive documentation maintenance"
    echo "  • Creates backup before making changes"
    echo ""
    echo -e "${BLUE}💡 Tips:${NC}"
    echo "  • Run audit first to understand current state"
    echo "  • Use organize to restructure documentation"
    echo "  • Use validate to check health and consolidate"
    echo "  • Run all operations monthly for maintenance"
    echo ""
    read -p "Press Enter to continue..."
}

# Main menu loop
while true; do
    clear
    show_menu
    read -p "Select an option (1-9): " choice
    
    case $choice in
        1)
            run_audit
            ;;
        2)
            organize_docs
            ;;
        3)
            validate_docs
            ;;
        4)
            view_structure
            ;;
        5)
            fix_issues
            ;;
        6)
            generate_report
            ;;
        7)
            run_all
            ;;
        8)
            show_help
            ;;
        9)
            echo -e "${GREEN}👋 Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}❌ Invalid option. Please select 1-9.${NC}"
            sleep 2
            ;;
    esac
done
