-- QuantDesk Community Points System Database Migration
-- Generated by @dev for Task 5: Community Points System Implementation

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    wallet_address VARCHAR(44) UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE,
    email VARCHAR(255),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true,
    total_points INTEGER DEFAULT 0,
    level VARCHAR(20) DEFAULT 'newcomer',
    last_login TIMESTAMP,
    referral_code VARCHAR(20) UNIQUE,
    referred_by UUID REFERENCES users(id)
);

-- Create points transactions table
CREATE TABLE IF NOT EXISTS points_transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    points INTEGER NOT NULL,
    transaction_type VARCHAR(50) NOT NULL CHECK (transaction_type IN ('earned', 'redeemed', 'bonus', 'penalty')),
    source VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    metadata JSONB DEFAULT '{}',
    validated BOOLEAN DEFAULT false,
    validated_at TIMESTAMP,
    validated_by UUID REFERENCES users(id)
);

-- Create badges table
CREATE TABLE IF NOT EXISTS badges (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    icon_url VARCHAR(255),
    points_required INTEGER DEFAULT 0,
    criteria JSONB DEFAULT '{}',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    category VARCHAR(50) DEFAULT 'general',
    rarity VARCHAR(20) DEFAULT 'common' CHECK (rarity IN ('common', 'rare', 'epic', 'legendary'))
);

-- Create user badges table
CREATE TABLE IF NOT EXISTS user_badges (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    badge_id UUID REFERENCES badges(id) ON DELETE CASCADE,
    earned_at TIMESTAMP DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true,
    UNIQUE(user_id, badge_id)
);

-- Create redemption options table
CREATE TABLE IF NOT EXISTS redemption_options (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    points_cost INTEGER NOT NULL,
    redemption_type VARCHAR(50) NOT NULL CHECK (redemption_type IN ('mikey_access', 'pro_membership', 'exclusive_feature', 'priority_support', 'airdrop_eligibility', 'custom_badge', 'vip_access')),
    is_active BOOLEAN DEFAULT true,
    max_redemptions INTEGER,
    cooldown_hours INTEGER DEFAULT 0,
    expires_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'
);

-- Create user redemptions table
CREATE TABLE IF NOT EXISTS user_redemptions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    redemption_option_id UUID REFERENCES redemption_options(id) ON DELETE CASCADE,
    points_spent INTEGER NOT NULL,
    redeemed_at TIMESTAMP DEFAULT NOW(),
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'expired', 'cancelled', 'pending')),
    expires_at TIMESTAMP,
    activated_at TIMESTAMP,
    metadata JSONB DEFAULT '{}'
);

-- Create airdrop tracking table
CREATE TABLE IF NOT EXISTS airdrop_tracking (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    eligibility_score INTEGER NOT NULL DEFAULT 0,
    points_contribution INTEGER NOT NULL DEFAULT 0,
    badge_contribution INTEGER NOT NULL DEFAULT 0,
    community_engagement INTEGER NOT NULL DEFAULT 0,
    total_score INTEGER NOT NULL DEFAULT 0,
    airdrop_tier VARCHAR(20) DEFAULT 'bronze' CHECK (airdrop_tier IN ('bronze', 'silver', 'gold', 'platinum')),
    last_updated TIMESTAMP DEFAULT NOW(),
    UNIQUE(user_id)
);

-- Create community challenges table
CREATE TABLE IF NOT EXISTS community_challenges (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(200) NOT NULL,
    description TEXT,
    challenge_type VARCHAR(50) NOT NULL CHECK (challenge_type IN ('points', 'badges', 'engagement', 'referral')),
    target_value INTEGER NOT NULL,
    points_reward INTEGER NOT NULL,
    badge_reward UUID REFERENCES badges(id),
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'
);

-- Create user challenge participation table
CREATE TABLE IF NOT EXISTS user_challenge_participation (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    challenge_id UUID REFERENCES community_challenges(id) ON DELETE CASCADE,
    progress INTEGER DEFAULT 0,
    completed BOOLEAN DEFAULT false,
    completed_at TIMESTAMP,
    points_earned INTEGER DEFAULT 0,
    joined_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(user_id, challenge_id)
);

-- Create leaderboards table
CREATE TABLE IF NOT EXISTS leaderboards (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    leaderboard_type VARCHAR(50) NOT NULL CHECK (leaderboard_type IN ('points', 'badges', 'engagement', 'referrals')),
    period VARCHAR(20) NOT NULL CHECK (period IN ('daily', 'weekly', 'monthly', 'all_time')),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Create leaderboard entries table
CREATE TABLE IF NOT EXISTS leaderboard_entries (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    leaderboard_id UUID REFERENCES leaderboards(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    rank INTEGER NOT NULL,
    score INTEGER NOT NULL,
    period_start TIMESTAMP NOT NULL,
    period_end TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(leaderboard_id, user_id, period_start)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_wallet_address ON users(wallet_address);
CREATE INDEX IF NOT EXISTS idx_users_total_points ON users(total_points DESC);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);
CREATE INDEX IF NOT EXISTS idx_points_transactions_user_id ON points_transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_points_transactions_created_at ON points_transactions(created_at);
CREATE INDEX IF NOT EXISTS idx_points_transactions_type ON points_transactions(transaction_type);
CREATE INDEX IF NOT EXISTS idx_user_badges_user_id ON user_badges(user_id);
CREATE INDEX IF NOT EXISTS idx_user_badges_badge_id ON user_badges(badge_id);
CREATE INDEX IF NOT EXISTS idx_user_redemptions_user_id ON user_redemptions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_redemptions_status ON user_redemptions(status);
CREATE INDEX IF NOT EXISTS idx_airdrop_tracking_total_score ON airdrop_tracking(total_score DESC);
CREATE INDEX IF NOT EXISTS idx_leaderboard_entries_rank ON leaderboard_entries(rank);
CREATE INDEX IF NOT EXISTS idx_leaderboard_entries_score ON leaderboard_entries(score DESC);

-- Create triggers for automatic updates
CREATE OR REPLACE FUNCTION update_user_total_points()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE users 
        SET total_points = total_points + NEW.points,
            updated_at = NOW()
        WHERE id = NEW.user_id;
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        UPDATE users 
        SET total_points = total_points - OLD.points + NEW.points,
            updated_at = NOW()
        WHERE id = NEW.user_id;
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE users 
        SET total_points = total_points - OLD.points,
            updated_at = NOW()
        WHERE id = OLD.user_id;
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_user_total_points
    AFTER INSERT OR UPDATE OR DELETE ON points_transactions
    FOR EACH ROW EXECUTE FUNCTION update_user_total_points();

-- Create function to calculate airdrop eligibility
CREATE OR REPLACE FUNCTION calculate_airdrop_eligibility(user_uuid UUID)
RETURNS INTEGER AS $$
DECLARE
    points_score INTEGER;
    badge_score INTEGER;
    engagement_score INTEGER;
    total_score INTEGER;
BEGIN
    -- Calculate points contribution (max 1000 points)
    SELECT COALESCE(SUM(points), 0) INTO points_score
    FROM points_transactions 
    WHERE user_id = user_uuid AND transaction_type = 'earned';
    
    points_score := LEAST(points_score, 1000);
    
    -- Calculate badge contribution (max 500 points)
    SELECT COALESCE(COUNT(*) * 50, 0) INTO badge_score
    FROM user_badges ub
    JOIN badges b ON ub.badge_id = b.id
    WHERE ub.user_id = user_uuid AND ub.is_active = true;
    
    badge_score := LEAST(badge_score, 500);
    
    -- Calculate engagement score (max 500 points)
    SELECT COALESCE(
        (EXTRACT(DAYS FROM NOW() - created_at) * 2) + 
        (COALESCE(total_points, 0) / 10), 0
    ) INTO engagement_score
    FROM users 
    WHERE id = user_uuid;
    
    engagement_score := LEAST(engagement_score, 500);
    
    -- Calculate total score
    total_score := points_score + badge_score + engagement_score;
    
    -- Update airdrop tracking
    INSERT INTO airdrop_tracking (user_id, eligibility_score, points_contribution, badge_contribution, community_engagement, total_score, airdrop_tier, last_updated)
    VALUES (user_uuid, total_score, points_score, badge_score, engagement_score, total_score, 
            CASE 
                WHEN total_score >= 1500 THEN 'platinum'
                WHEN total_score >= 1000 THEN 'gold'
                WHEN total_score >= 500 THEN 'silver'
                ELSE 'bronze'
            END, NOW())
    ON CONFLICT (user_id) DO UPDATE SET
        eligibility_score = total_score,
        points_contribution = points_score,
        badge_contribution = badge_score,
        community_engagement = engagement_score,
        total_score = total_score,
        airdrop_tier = CASE 
            WHEN total_score >= 1500 THEN 'platinum'
            WHEN total_score >= 1000 THEN 'gold'
            WHEN total_score >= 500 THEN 'silver'
            ELSE 'bronze'
        END,
        last_updated = NOW();
    
    RETURN total_score;
END;
$$ LANGUAGE plpgsql;

-- Insert default badges
INSERT INTO badges (name, description, points_required, category, rarity) VALUES
('Early Adopter', 'One of the first 100 users to join QuantDesk', 100, 'early_adopter', 'rare'),
('Beta Tester', 'Completed 10+ beta tests', 500, 'testing', 'common'),
('Bug Reporter', 'Reported 3+ valid bugs', 200, 'community', 'common'),
('Feature Suggestion', 'Suggested 2+ features that were implemented', 300, 'community', 'common'),
('Community Helper', 'Helped 5+ community members', 400, 'community', 'common'),
('Power User', 'Accumulated 1000+ points', 1000, 'power_user', 'epic'),
('Community Leader', 'Top 10 contributor', 1500, 'leadership', 'epic'),
('QuantDesk Ambassador', 'Referred 10+ users', 2000, 'ambassador', 'legendary'),
('Hackathon Participant', 'Participated in QuantDesk hackathon', 500, 'events', 'rare'),
('SDK Contributor', 'Contributed to SDK development', 750, 'development', 'rare'),
('Documentation Contributor', 'Contributed to documentation', 600, 'development', 'common')
ON CONFLICT (name) DO NOTHING;

-- Insert default redemption options
INSERT INTO redemption_options (name, description, points_cost, redemption_type, cooldown_hours, metadata) VALUES
('MIKEY AI Access - Basic', '1 month of basic AI trading assistant access', 500, 'mikey_access', 0, '{"tier": "basic", "duration_days": 30}'),
('MIKEY AI Access - Pro', '1 month of pro AI trading assistant access', 1000, 'mikey_access', 0, '{"tier": "pro", "duration_days": 30}'),
('Pro Membership', '3 months of premium features', 1000, 'pro_membership', 0, '{"duration_days": 90}'),
('Exclusive Features Access', 'Early access to new features', 750, 'exclusive_feature', 0, '{"duration_days": 60}'),
('Priority Support', 'Priority customer support for 1 month', 300, 'priority_support', 0, '{"duration_days": 30}'),
('Airdrop Eligibility', 'Guaranteed token airdrop eligibility', 2000, 'airdrop_eligibility', 0, '{"permanent": true}'),
('Custom Badge', 'Personalized community badge', 1500, 'custom_badge', 0, '{"permanent": true}'),
('VIP Discord Access', 'Exclusive Discord channel access', 400, 'vip_access', 0, '{"duration_days": 30}')
ON CONFLICT (name) DO NOTHING;

-- Create default leaderboards
INSERT INTO leaderboards (name, leaderboard_type, period) VALUES
('Weekly Points Leaderboard', 'points', 'weekly'),
('Monthly Contributors Leaderboard', 'badges', 'monthly'),
('All-Time Badge Collection', 'badges', 'all_time'),
('Community Engagement', 'engagement', 'monthly')
ON CONFLICT (name) DO NOTHING;

-- Create view for user statistics
CREATE OR REPLACE VIEW user_stats AS
SELECT 
    u.id,
    u.wallet_address,
    u.username,
    u.total_points,
    u.level,
    u.created_at,
    COUNT(DISTINCT ub.badge_id) as badge_count,
    COUNT(DISTINCT pt.id) as transaction_count,
    COUNT(DISTINCT ur.id) as redemption_count,
    COALESCE(at.airdrop_tier, 'bronze') as airdrop_tier,
    COALESCE(at.total_score, 0) as airdrop_score
FROM users u
LEFT JOIN user_badges ub ON u.id = ub.user_id AND ub.is_active = true
LEFT JOIN points_transactions pt ON u.id = pt.user_id
LEFT JOIN user_redemptions ur ON u.id = ur.user_id AND ur.status = 'active'
LEFT JOIN airdrop_tracking at ON u.id = at.user_id
WHERE u.is_active = true
GROUP BY u.id, u.wallet_address, u.username, u.total_points, u.level, u.created_at, at.airdrop_tier, at.total_score;

-- Grant permissions (adjust as needed for your setup)
-- GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO quantdesk_user;
-- GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO quantdesk_user;

COMMENT ON TABLE users IS 'Core user table for QuantDesk community points system';
COMMENT ON TABLE points_transactions IS 'All points transactions (earned, redeemed, bonuses)';
COMMENT ON TABLE badges IS 'Available badges that users can earn';
COMMENT ON TABLE user_badges IS 'Badges earned by users';
COMMENT ON TABLE redemption_options IS 'Items/services users can redeem with points';
COMMENT ON TABLE user_redemptions IS 'Redemptions made by users';
COMMENT ON TABLE airdrop_tracking IS 'Airdrop eligibility tracking and scoring';
COMMENT ON TABLE community_challenges IS 'Community challenges and events';
COMMENT ON TABLE user_challenge_participation IS 'User participation in community challenges';
COMMENT ON TABLE leaderboards IS 'Leaderboard definitions';
COMMENT ON TABLE leaderboard_entries IS 'Leaderboard rankings and scores';

-- Migration completed successfully
SELECT 'QuantDesk Community Points System database migration completed successfully!' as status;
